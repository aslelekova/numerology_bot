# services/question_service.py

from services.gpt_service import client

async def generate_question_response(question: str, user_name: str, birth_date: str) -> str:

    prompt = (
        f"–ú–µ–Ω—è –∑–æ–≤—É—Ç {user_name}, –º–æ—è –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è {birth_date}. "
        f"–Ø —Ö–æ—á—É –∑–∞–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å: {question}."
    )
    
    response_text = await generate_response(prompt, client)
    
    return response_text


async def generate_response(prompt: str, client) -> str:
    messages = [{"role": "user", "content": prompt}]
    response = await client.chat.completions.create(
        messages=messages,
        model="gpt-4o"
    )
    return response.choices[0].message.content


async def generate_suggestions(user_question: str, client) -> str:
    suggestion_prompt = (
        f"–ü—Ä–µ–¥–ª–æ–∂–∏ —Ç—Ä–∏ –≤–æ–ø—Ä–æ—Å–∞ (–ø—Ä–æ–Ω—É–º–µ—Ä—É–π –∏—Ö —Ç–∞–∫: üîÆ -), —Ä–∞–∑–¥–µ–ª—è–π –∏—Ö –∫–∞–∫ \\n, –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ "
        f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: '{user_question}'."
    )
    messages = [{"role": "user", "content": suggestion_prompt}]
    suggestion_response = await client.chat.completions.create(
        messages=messages,
        model="gpt-4o"
    )
    return suggestion_response.choices[0].message.content
