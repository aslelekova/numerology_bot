# services/message_service.py
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton
from aiogram.types import CallbackQuery
from aiogram import types

from aiogram.types import InlineKeyboardMarkup


async def delete_message(bot, chat_id, message_id):
    try:
        await bot.delete_message(chat_id=chat_id, message_id=message_id)
    except Exception as e:
        if "message to delete not found" not in str(e):
            print(f"Error deleting message: {e}")


async def delete_messages(bot, chat_id: int, message_ids: list[int]):
    for message_id in message_ids:
        if message_id:
            try:
                await bot.delete_message(chat_id=chat_id, message_id=message_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {e}")


async def send_initial_messages(bot, chat_id: int, state: FSMContext, section_message: str, question_message: str,
                                sections_keyboard, functions_keyboard):
    first_message = await bot.send_message(chat_id, section_message, reply_markup=sections_keyboard)
    await state.update_data(first_message_id=first_message.message_id)

    question_prompt_message = await bot.send_message(
        chat_id,
        question_message,
        reply_markup=functions_keyboard,
        parse_mode="HTML"
    )
    await state.update_data(question_prompt_message_id=question_prompt_message.message_id)
    await save_message_id(state, question_prompt_message.message_id)


async def notify_subscription_expired(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer(
        "–£–ø—Å, –ø–æ—Ö–æ–∂–µ —É –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª—Å—è —Ç–∞—Ä–∏—Ñ, –æ—Ç–∫—Ä–æ–π—Ç–µ –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞—Å—á–µ—Ç ü´∂"
    )

    full_access_message = (
        "–ü–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤—Å–µ —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã —Å –ü–û–õ–ù–´–ú –¥–æ—Å—Ç—É–ø–æ–º –∫:\n"
        "üîÆ –ú–∞—Ç—Ä–∏—Ü–µ —Å—É–¥—å–±—ã\n"
        "üí∏ –ù—É–º–µ—Ä–æ–ª–æ–≥–∏–∏ | –õ–∏—á–Ω–æ–º—É —É—Å–ø–µ—Ö—É | –§–∏–Ω–∞–Ω—Å–∞–º\n"
        "üíï –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º\n\n"
        "–ò–ª–∏ –∑–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –Ω–∞—à–µ–º—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º—É –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É –∏ –ø–æ–ª—É—á–∏—Ç–µ –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: üíï –ö–∞–∫ —É–ª—É—á—à–∏—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º?)"
    )

    access_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø", callback_data="get_full_access")],
        [InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])

    mes = await callback_query.message.answer(
        full_access_message,
        reply_markup=access_keyboard,
        parse_mode="HTML"
    )

    await save_message_id(state, mes.message_id)



async def save_message_id(state: FSMContext, message_id: int):
    data = await state.get_data()
    all_message_ids = data.get("all_message_ids", [])
    all_message_ids.append(message_id)
    await state.update_data(all_message_ids=all_message_ids)
