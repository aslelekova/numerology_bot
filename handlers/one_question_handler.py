from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import StateFilter
from handlers.sections_handler import client
from handlers.start_handler import cmd_start
from states import QuestionState

router = Router()


@router.callback_query(lambda callback: callback.data == "ask_free_question")
async def ask_free_question_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å (–ù–∞–ø—Ä–∏–º–µ—Ä: üíï –ö–∞–∫ —É–ª—É—á—à–∏—Ç—å –º–æ–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º?)\n\n"
        "‚ö°Ô∏è –£ –≤–∞—Å –µ—Å—Ç—å 1 –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å"
    )
    await state.set_state(QuestionState.waiting_for_question)


@router.message(StateFilter(QuestionState.waiting_for_question))
async def process_question(message: types.Message, state: FSMContext):
    print("Process question handler triggered")

    user_data = await state.get_data()
    print(f"User data: {user_data}")

    if user_data.get("question_asked", False):
        await message.answer(
            "–£–ø—Å, –ø–æ—Ö–æ–∂–µ —É –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –æ—Ç–∫—Ä–æ–π—Ç–µ –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é.\n\n‚ö°Ô∏è 0 "
            "–±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"
        )
        return

    user_question = message.text
    user_name = user_data.get("user_name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    user_date = user_data.get("user_date", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞")

    prompt = (
        f"–£ –≤–∞—Å –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∏–º–µ–Ω–µ–º {user_name}, –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è {user_date}. "
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞–ª —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ –º–∞—Ç—Ä–∏—Ü–µ —Å—É–¥—å–±—ã: '{user_question}'. –ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç, "
        f"—É—á–∏—Ç—ã–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –µ–≥–æ –≤–æ–ø—Ä–æ—Å."
    )

    messages = [{"role": "user", "content": prompt}]

    generating_message = await message.answer("‚è≥")

    try:
        response = await client.chat.completions.create(
            messages=messages,
            model="gpt-3.5-turbo"
        )
        response_text = response.choices[0].message.content
    except Exception as e:
        await generating_message.delete()
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    await generating_message.delete()

    response_message = await message.answer(response_text)

    suggestion_prompt = (
        f"–ü—Ä–µ–¥–ª–æ–∂–∏ —Ç—Ä–∏ –≤–æ–ø—Ä–æ—Å–∞ (–ø—Ä–æ–Ω—É–º–µ—Ä—É–π –∏—Ö —Ç–∞–∫: üîÆ -), —Ä–∞–∑–¥–µ–ª—è–π –∫–∞–∫ \\n, –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: '{user_question}'. –í–æ–ø—Ä–æ—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å "
        f"–∫—Ä–∞—Ç–∫–∏–º–∏ –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –Ω–∞ —Ä–∞–∑–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã –∂–∏–∑–Ω–∏."
    )

    suggestions_messages = [{"role": "user", "content": suggestion_prompt}]

    try:
        suggestion_response = await client.chat.completions.create(
            messages=suggestions_messages,
            model="gpt-3.5-turbo"
        )
        suggestions_text = suggestion_response.choices[0].message.content
    except Exception as e:
        suggestions_text = (
            "üîÆ - –ö–∞–∫–æ–µ –±—É–¥—É—â–µ–µ –º–µ–Ω—è –æ–∂–∏–¥–∞–µ—Ç?\n"
            "üîÆ - –ö–∞–∫–∏–µ —Ç–∞–ª–∞–Ω—Ç—ã –∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –º–Ω–µ —Ä–∞–∑–≤–∏–≤–∞—Ç—å?\n"
            "üîÆ - –ö–∞–∫ –ø—Ä–∏–≤–ª–µ—á—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏–µ?"
        )
        print(f"Error generating suggestions: {e}")

    inline_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø", callback_data="get_full_access")],
            [InlineKeyboardButton(text="–ó–∞–¥–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å (–ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –¥—Ä—É–≥–æ–º)",
                                  callback_data="share_and_ask")],
            [InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
        ]
    )

    suggestion_message = await message.answer(
        f"üí´ <b>–ó–∞–¥–∞–≤–∞–π—Ç–µ –µ—â–µ –±–æ–ª—å—à–µ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å–≤–æ–µ–º—É –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É!</b> –í–æ—Ç –ø—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤–∞—Å "
        f"–∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å:\n\n"
        f"{suggestions_text}\n\n"
        "–ü–û–î–ï–õ–ò–¢–ï–°–¨ —Å –¥—Ä—É–≥–æ–º –∏ –ø–æ–ª—É—á–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞—Ç—å <b>–µ—â–µ –æ–¥–∏–Ω –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å</b>, –∏–ª–∏ –ü–û–õ–£–ß–ò–¢–ï –ü–û–õ–ù–´–ô "
        "–î–û–°–¢–£–ü –∫ –±–æ—Ç—É,"
        "—á—Ç–æ–±—ã –∑–∞–¥–∞–≤–∞—Ç—å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –¥–µ–ª–∞—Ç—å –ª—é–±—ã–µ —Ä–∞—Å–∫–ª–∞–¥—ã! üòç",
        reply_markup=inline_keyboard
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–≤—É—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(previous_message_ids=[response_message.message_id, suggestion_message.message_id])
    await state.update_data(question_asked=True)


@router.callback_query(lambda callback: callback.data == "main_menu")
async def main_menu_callback(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        user_data = await state.get_data()
        previous_message_ids = user_data.get("previous_message_ids", [])
        first_message_id = user_data.get("first_message_id")
        question_prompt_message_id = user_data.get("question_prompt_message_id")

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º ID
        for message_id in previous_message_ids + [first_message_id, question_prompt_message_id]:
            if message_id:
                try:
                    await callback_query.message.bot.delete_message(callback_query.message.chat.id, message_id)
                except Exception as e:
                    if "message to delete not found" not in str(e):
                        print(f"Error deleting message with ID {message_id}: {e}")

        await callback_query.message.delete()

    except Exception as e:
        print(f"Error deleting messages: {e}")

    await cmd_start(callback_query.message)
