from aiogram import Router, types
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from keyboards.main_menu_keyboard import main_menu_keyboard
from services.gpt_service import client
from services.question_service import generate_question_response, generate_suggestions
from states import QuestionState

router = Router()


@router.callback_query(lambda callback: callback.data == "ask_free_question")
async def ask_free_question_callback(callback_query: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    if user_data.get("question_asked", False):
        await callback_query.message.answer("–£–ø—Å, –ø–æ—Ö–æ–∂–µ —É –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã...")
    else:
        await callback_query.message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å (–ù–∞–ø—Ä–∏–º–µ—Ä: üíï –ö–∞–∫ —É–ª—É—á—à–∏—Ç—å "
                                            "–º–æ–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º?)\n\n‚ö°Ô∏è –£ –≤–∞—Å –µ—Å—Ç—å 1 –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å")
        await state.set_state(QuestionState.waiting_for_question)


@router.message(StateFilter(QuestionState.waiting_for_question))
async def process_question(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    if user_data.get("question_asked", False):
        await message.answer("–£–ø—Å, –ø–æ—Ö–æ–∂–µ —É –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã...")
        return

    generating_message = await message.answer("‚è≥")

    user_name = user_data.get('user_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
    birth_date = user_data.get('user_date', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞')
    question = message.text  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –≤–æ–ø—Ä–æ—Å


    response_text = await generate_question_response(question, user_name, birth_date)

    await generating_message.delete()

    await message.answer(response_text)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    suggestions_text = await generate_suggestions(message.text, client)

    inline_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø", callback_data="get_full_access")],
        [InlineKeyboardButton(text="–ó–∞–¥–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å (–ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –¥—Ä—É–≥–æ–º)", callback_data="share_and_ask")],
        [InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
    ])

    suggestion_message_text = (
        f"üí´ –ó–∞–¥–∞–≤–∞–π—Ç–µ –µ—â–µ –±–æ–ª—å—à–µ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å–≤–æ–µ–º—É –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É! –í–æ—Ç –ø—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤–∞—Å "
        f"–∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å:\n\n{suggestions_text}\n\n"
        f"–ü–û–î–ï–õ–ò–¢–ï–°–¨ —Å –¥—Ä—É–≥–æ–º –∏ –ø–æ–ª—É—á–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å, –∏–ª–∏ –ü–û–õ–£–ß–ò–¢–ï –ü–û–õ–ù–´–ô –î–û–°–¢–£–ü –∫ "
        f"–±–æ—Ç—É, —á—Ç–æ–±—ã –∑–∞–¥–∞–≤–∞—Ç—å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –¥–µ–ª–∞—Ç—å –ª—é–±—ã–µ —Ä–∞—Å–∫–ª–∞–¥—ã! üòç"
    )

    suggestion_message = await message.answer(suggestion_message_text, reply_markup=inline_keyboard)

    previous_message_ids = user_data.get("previous_message_ids", [])
    previous_message_ids.append(suggestion_message.message_id)
    await state.update_data(previous_message_ids=previous_message_ids)
    await state.update_data(question_asked=True)


@router.callback_query(lambda callback: callback.data == "main_menu")
async def main_menu_callback(callback_query: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    user_name = callback_query.from_user.first_name

    previous_message_ids = user_data.get("previous_message_ids", [])

    for message_id in previous_message_ids:
        try:
            await callback_query.message.bot.delete_message(
                chat_id=callback_query.message.chat.id,
                message_id=message_id
            )
        except Exception as e:
            if "message to delete not found" not in str(e):
                print(f"Error deleting message with ID {message_id}: {e}")

    await state.clear()
    await state.update_data(question_asked=False)

    await callback_query.message.answer(
        f"–î–æ–±—Ä—ã–π –¥–µ–Ω—å, {user_name}!\n\n–ú—ã —Ä–∞–¥—ã –ø–æ–º–æ—á—å –≤–∞–º —Å —Ä–∞—Å—á–µ—Ç–æ–º –º–∞—Ç—Ä–∏—Ü—ã —Å—É–¥—å–±—ã, "
        "–Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏, —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ —É—Å–ø–µ—Ö–∞, –±–æ–≥–∞—Ç—Å—Ç–≤–∞ –∏ –¥—Ä—É–≥–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.\n\n"
        "<b>–ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å.</b> –° —á–µ–≥–æ –Ω–∞—á–Ω–µ–º?",
        reply_markup=main_menu_keyboard()
    )

