# handlers/one_question_handler.py

from aiogram import Router, types
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from handlers.start_handler import cmd_start
from services.question_service import generate_response, generate_suggestions
from services.message_service import delete_previous_messages
from states import QuestionState

router = Router()


@router.callback_query(lambda callback: callback.data == "ask_free_question")
async def ask_free_question_callback(callback_query: types.CallbackQuery, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª –ª–∏ —É–∂–µ –∑–∞–¥–∞–Ω –≤–æ–ø—Ä–æ—Å
    user_data = await state.get_data()
    if user_data.get("question_asked", False):
        await callback_query.message.answer("–£–ø—Å, –ø–æ—Ö–æ–∂–µ —É –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã...")
        return

    await callback_query.message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å (–ù–∞–ø—Ä–∏–º–µ—Ä: üíï –ö–∞–∫ —É–ª—É—á—à–∏—Ç—å –º–æ–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º?)\n\n"
        "‚ö°Ô∏è –£ –≤–∞—Å –µ—Å—Ç—å 1 –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å"
    )
    await state.set_state(QuestionState.waiting_for_question)


@router.message(StateFilter(QuestionState.waiting_for_question))
async def process_question(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    if user_data.get("question_asked", False):
        await message.answer("–£–ø—Å, –ø–æ—Ö–æ–∂–µ —É –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã...")
        return

    prompt = f"–£ –≤–∞—Å –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∏–º–µ–Ω–µ–º {user_data['user_name']}, –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è {user_data['user_date']}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞–ª —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å: '{message.text}'."
    response_text = await generate_response(prompt)

    await message.answer(response_text)
    suggestions_text = await generate_suggestions(message.text)
    inline_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø", callback_data="get_full_access")],
        [InlineKeyboardButton(text="–ó–∞–¥–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å (–ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –¥—Ä—É–≥–æ–º)", callback_data="share_and_ask")],
        [InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
    ])
    suggestion_message = await message.answer(f"üí´ –í–æ—Ç –ø—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:\n\n{suggestions_text}",
                                              reply_markup=inline_keyboard)

    await state.update_data(previous_message_ids=[suggestion_message.message_id])
    await state.update_data(question_asked=True)


@router.callback_query(lambda callback: callback.data == "main_menu")
async def main_menu_callback(callback_query: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    await delete_previous_messages(callback_query.message.chat.id, user_data.get("previous_message_ids", []),
                                   callback_query.message.bot)
    await cmd_start(callback_query.message)
