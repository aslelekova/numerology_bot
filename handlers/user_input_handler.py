# handlers/user_input_handler.py

import asyncio
import aiosqlite
from aiogram import Router, types
from aiogram.filters.callback_data import CallbackData
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import StateFilter

from calendar_module.calendar_utils import get_user_locale
from calendar_module.schemas import DialogCalAct, DialogCalendarCallback
from handlers.sections_handler import handle_section
from handlers.start_handler import cmd_start
from keyboards.sections_fate_matrix import create_full_sections_keyboard, create_sections_keyboard, create_reply_keyboard, functions_keyboard
from services.birthday_service import calculate_values
from services.calendar_service import process_calendar_selection, start_calendar
from services.db_service import get_subscription_details, update_subscription_status, update_user_readings_left
from services.gpt_service import EventHandler, setup_assistant_and_vector_store
from services.message_service import delete_messages, notify_subscription_expired
from services.user_service import update_user_name, get_user_data, update_user_date
from states import Form

router = Router()


async def prompt_for_name(call: CallbackQuery, state: FSMContext, message_text: str, next_state: str):
    """
    Prompts the user to enter their name by sending a message and updating the state.

    :param call: The callback query object containing information about the callback event.
    :param state: The FSM (Finite State Machine) context to manage the state of the conversation.
    :param message_text: The text message to prompt the user for their name.
    :param next_state: The next state in the FSM after the user responds.
    :return: None
    """
    await call.message.delete()
    prompt_message = await call.message.answer(message_text)
    await state.update_data(prompt_message_id=prompt_message.message_id)
    await state.set_state(next_state)


@router.message(StateFilter(Form.waiting_for_name))
async def handle_params_input(message: types.Message, state: FSMContext):
    """
    Handles user input for their name, updates the state, and prompts the user to select a date of birth.

    :param message: The message object containing the user's input.
    :param state: The FSM (Finite State Machine) context to manage the state of the conversation.
    :return: None
    """
    user_name = message.text
    await update_user_name(state, user_name)

    data = await state.get_data()
    prompt_message_id = data.get("prompt_message_id")

    if prompt_message_id:
        try:
            await message.bot.delete_message(chat_id=message.chat.id, message_id=prompt_message_id)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    try:
        await message.delete()

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

    date_prompt_message = await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è üëá",
        reply_markup=await start_calendar(locale=await get_user_locale(message.from_user))
    )
    await state.update_data(date_prompt_message_id=date_prompt_message.message_id)
    await state.set_state(Form.waiting_for_data)


@router.callback_query(DialogCalendarCallback.filter())
async def process_selecting_category(callback_query: CallbackQuery, callback_data: CallbackData, state: FSMContext):
    selected, date = await process_calendar_selection(callback_query, callback_data)

    if selected:
        user_name, _ = await get_user_data(state)
        await update_user_date(state, date)

        day, month, year = date.day, date.month, date.year
        values = calculate_values(day, month, year)
        data = await state.get_data()
        previous_message_id = data.get("date_prompt_message_id")

        if previous_message_id:
            try:
                await callback_query.message.bot.delete_message(chat_id=callback_query.message.chat.id, message_id=previous_message_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º: {e}")

        generating_message = await callback_query.message.answer("‚è≥")
        assistant = await setup_assistant_and_vector_store()

        response_text = None
        max_retries = 10
        attempt = 0
        # while response_text is None and attempt < max_retries:
        #     attempt += 1
        #     response_text = await generate_gpt_response_matrix(user_name, values, assistant)
        #     if not response_text:
        #         print(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt}: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç.")


        await state.update_data(response_text=response_text)

        await generating_message.delete()

        if not response_text:
            await callback_query.message.answer(
                "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.",
            )
            await cmd_start(callback_query.message, state)
            return

        response_text = response_text.replace("#", "").replace("*", "")
        split_text = response_text.split("---")
        categories = [
            "–õ–∏—á–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞",
            "–ü—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ",
            "–î–µ—Ç—Å–∫–æ-—Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è",
            "–¢–∞–ª–∞–Ω—Ç—ã",
            "–†–æ–¥–æ–≤—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã",
            "–ö–∞—Ä–º–∏—á–µ—Å–∫–∏–π —Ö–≤–æ—Å—Ç",
            "–ì–ª–∞–≤–Ω—ã–π –∫–∞—Ä–º–∏—á–µ—Å–∫–∏–π —É—Ä–æ–∫",
            "–û—Ç–Ω–æ—à–µ–Ω–∏—è",
            "–î–µ–Ω—å–≥–∏"
        ]

        categories_dict = {category: split_text[i].strip() for i, category in enumerate(categories) if i < len(split_text)}

        await state.update_data(full_response=categories_dict)
        user_id = callback_query.from_user.id
        subscription_details = await get_subscription_details(user_id)
        subscription_active = subscription_details["subscription_active"]
        readings_left = subscription_details["readings_left"]
        questions_left = subscription_details["questions_left"]
        
        if subscription_active:  
            sections_keyboard = create_full_sections_keyboard()
            first_message = await callback_query.message.answer(
                f"–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å:\nüîÆ {readings_left} –ª—é–±—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–≤\n‚ö°Ô∏è {questions_left} –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã",
                reply_markup=sections_keyboard
            )
            await state.update_data(first_message_id=first_message.message_id)

            question_prompt_message = await callback_query.message.answer(
                    f"–°–¥–µ–ª–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç:  \nüîÆ –ú–∞—Ç—Ä–∏—Ü–∞ —Å—É–¥—å–±—ã\nüí∏ –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è | –õ–∏—á–Ω–æ–º—É —É—Å–ø–µ—Ö—É | –§–∏–Ω–∞–Ω—Å–∞–º\nüíï –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º\n\n–ò–ª–∏ <b>–∑–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å</b> –Ω–∞—à–µ–º—É "
                "–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º—É –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É –∏ –ø–æ–ª—É—á–∏—Ç–µ –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: üíï<b>–ö–∞–∫ —É–ª—É—á—à–∏—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º?</b>)",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç", callback_data="main_menu")],
                    [InlineKeyboardButton(text="–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="ask_free_question")],
                    [InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                    ]),
                    parse_mode="HTML"
                )

            await state.update_data(question_prompt_message_id=question_prompt_message.message_id)
        else:
            sections_keyboard = create_sections_keyboard()
            first_message = await callback_query.message.answer(
                "–£—Ä–∞, –≤–∞—à–∞ –º–∞—Ç—Ä–∏—Ü–∞ —Å—É–¥—å–±—ã –≥–æ—Ç–æ–≤–∞ üîÆ\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–∫–ª–∞–¥ –ø–æ –∫–∞–∂–¥–æ–º—É –∏–∑ —Ä–∞–∑–¥–µ–ª–æ–≤.\n"
                "‚úÖ - –¥–æ—Å—Ç—É–ø–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ\n"
                "üîê - —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø",
                reply_markup=sections_keyboard
            )
            await state.update_data(first_message_id=first_message.message_id)

            three_functions = functions_keyboard()
            question_prompt_message = await callback_query.message.answer(
                f"–ü–æ–ª—É—á–∏—Ç–µ <b>–æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤—Å–µ —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã</b> —Å –ü–û–õ–ù–´–ú –¥–æ—Å—Ç—É–ø–æ–º –∫:\nüîÆ –ú–∞—Ç—Ä–∏—Ü–µ —Å—É–¥—å–±—ã\nüí∏ –ù—É–º–µ—Ä–æ–ª–æ–≥–∏–∏"
                " | –õ–∏—á–Ω–æ–º—É —É—Å–ø–µ—Ö—É | –§–∏–Ω–∞–Ω—Å–∞–º\nüíï –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º\n\n–ò–ª–∏ <b>–∑–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å</b> –Ω–∞—à–µ–º—É "
                "–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º—É –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É –∏ –ø–æ–ª—É—á–∏—Ç–µ –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: üíï<b>–ö–∞–∫ —É–ª—É—á—à–∏—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º?</b>)",
                reply_markup=three_functions,
                parse_mode="HTML"
            )
            await state.update_data(question_prompt_message_id=question_prompt_message.message_id)


@router.callback_query(lambda callback: callback.data.startswith("section_"))
async def handle_section_callback(callback_query: CallbackQuery, state: FSMContext):
    category_mapping = {
        "section_personal": "–õ–∏—á–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞",
        "section_destiny": "–ü—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ",
        "section_talents": "–¢–∞–ª–∞–Ω—Ç—ã",
        "section_family_relationships": "–î–µ—Ç—Å–∫–æ-—Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è",
        "section_generic_programs": "–†–æ–¥–æ–≤—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã",
        "section_karmic_tail": "–ö–∞—Ä–º–∏—á–µ—Å–∫–∏–π —Ö–≤–æ—Å—Ç",
        "section_karmic_lesson": "–ì–ª–∞–≤–Ω—ã–π –∫–∞—Ä–º–∏—á–µ—Å–∫–∏–π —É—Ä–æ–∫",
        "section_relationships": "–û—Ç–Ω–æ—à–µ–Ω–∏—è",
        "section_money": "–î–µ–Ω—å–≥–∏",
    }

    category = category_mapping.get(callback_query.data, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è")

    data = await state.get_data()
    first_message_id = data.get("first_message_id")
    question_prompt_message_id = data.get("question_prompt_message_id")
    previous_warning_message_id = data.get("previous_warning_message_id")

    if previous_warning_message_id:
        try:
            await callback_query.message.bot.delete_message(chat_id=callback_query.message.chat.id, message_id=previous_warning_message_id)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    user_id = callback_query.from_user.id
    subscription_details = await get_subscription_details(user_id)
    subscription_active = subscription_details["subscription_active"]
    readings_left = subscription_details["readings_left"]
    questions_left = subscription_details["questions_left"]

    if readings_left <= 0 and questions_left <= 0:
        await update_subscription_status(user_id, 0)

    if not subscription_active and category not in [
        "–õ–∏—á–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞",
        "–ü—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ",
        "–¢–∞–ª–∞–Ω—Ç—ã",
        "–î–µ—Ç—Å–∫–æ-—Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è"
    ]:
        warning_message = await callback_query.message.answer(
            "–≠—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–∫—Ä–æ–π—Ç–µ –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø."
        )
        await state.update_data(previous_warning_message_id=warning_message.message_id)
        return

    if subscription_active and readings_left <= 0 and category not in [
        "–õ–∏—á–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞",
        "–ü—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ",
        "–¢–∞–ª–∞–Ω—Ç—ã",
        "–î–µ—Ç—Å–∫–æ-—Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è"
    ]:
        await notify_subscription_expired(callback_query, state)
        return

    if subscription_active and category not in [
        "–õ–∏—á–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞",
        "–ü—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ",
        "–¢–∞–ª–∞–Ω—Ç—ã",
        "–î–µ—Ç—Å–∫–æ-—Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è"
    ]:
        new_readings_left = readings_left - 1
        await update_user_readings_left(user_id, new_readings_left)
    
    await delete_messages(callback_query.bot, callback_query.message.chat.id, [first_message_id, question_prompt_message_id])
    await handle_section(callback_query, state, category)


@router.callback_query(lambda callback: callback.data == "my_tariff")
async def show_current_tariff(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.delete()
    user_id = callback_query.from_user.id

    async with aiosqlite.connect('users.db') as db:
        async with db.execute("SELECT tariff, readings_left, questions_left, subscription_active FROM login_id WHERE id = ?", (user_id,)) as cursor:
            result = await cursor.fetchone()

    if result:
        tariff_number, readings_left, questions_left, subscription_active = result
        if tariff_number == "–¢–∞—Ä–∏—Ñ 1":
            tariff_price = "290 —Ä—É–±–ª–µ–π"
        elif tariff_number == "–¢–∞—Ä–∏—Ñ 2":
            tariff_price = "450 —Ä—É–±–ª–µ–π"
        elif tariff_number == "–¢–∞—Ä–∏—Ñ 3":
            tariff_price = "650 —Ä—É–±–ª–µ–π"
        else:
            tariff_price = "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞"

        status_message = (
            f"–í–∞—à —Ç–∞—Ä–∏—Ñ: {tariff_price}\n\n"
            f"üí´ –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å:\n"
            f"‚Ä¢ üîÆ {readings_left} –ª—é–±—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–≤\n"
            f"‚Ä¢ ‚ö°Ô∏è {questions_left} –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n\n"
            "–û–±–Ω–æ–≤–∏—Ç—å —Ç–∞—Ä–∏—Ñ?"
        )

        new_message = await callback_query.message.answer(
            status_message,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–û–±–Ω–æ–≤–∏—Ç—å —Ç–∞—Ä–∏—Ñ", callback_data="get_full_access_main")],
                [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="main_menu")]
            ])
        )

        await state.update_data(tariff_message_id=new_message.message_id)
    else:
        await callback_query.message.answer("–û—à–∏–±–∫–∞: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞—Ä–∏—Ñ–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
