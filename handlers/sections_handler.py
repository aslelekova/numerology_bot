# handlers/sections_handler.py

from aiogram import Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from openai import AsyncOpenAI

import config
from keyboards.back_to_menu import create_back_button
from keyboards.sections_fate_matrix import create_sections_keyboard, functions_keyboard
from services.birthday_service import calculate_values
from states import QuestionState

router = Router()

client = AsyncOpenAI(api_key=config.OPENAI_API_KEY)


async def handle_section(callback_query: CallbackQuery, state: FSMContext, category: str):
    data = await state.get_data()

    categories_dict = data.get("full_response", {})
    selected_category = categories_dict.get(category, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è")

    if selected_category == "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è":
        await callback_query.message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é.")
        return

    await callback_query.message.answer(selected_category, reply_markup=create_back_button())


@router.callback_query(lambda callback: callback.data.startswith("section_"))
async def handle_section_callback(callback_query: CallbackQuery, state: FSMContext):
    category_mapping = {
        "section_personal": "–õ–∏—á–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞",
        "section_destiny": "–ü—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ",
        "section_talents": "–¢–∞–ª–∞–Ω—Ç—ã",
        "section_family_relationships": "–î–µ—Ç—Å–∫–æ-—Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è",
        "section_generic_programs": "–†–æ–¥–æ–≤—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã",
        "section_karmic_tail": "–ö–∞—Ä–º–∏—á–µ—Å–∫–∏–π —Ö–≤–æ—Å—Ç",
        "section_karmic_lesson": "–ì–ª–∞–≤–Ω—ã–π –∫–∞—Ä–º–∏—á–µ—Å–∫–∏–π —É—Ä–æ–∫",
        "section_relationships": "–û—Ç–Ω–æ—à–µ–Ω–∏—è",
        "section_money": "–î–µ–Ω—å–≥–∏",
    }

    category_key = callback_query.data
    category = category_mapping.get(category_key, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è")

    if category == "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è":
        await callback_query.message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é.")
        return

    data = await state.get_data()
    response_text = data.get("full_response", {})

    if not isinstance(response_text, dict):
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")
        return

    selected_category = response_text.get(category, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è")

    if selected_category == "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è":
        await callback_query.message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é.")
        return

    first_message_id = data.get("first_message_id")
    question_prompt_message_id = data.get("question_prompt_message_id")

    if first_message_id:
        try:
            await callback_query.message.chat.delete_message(message_id=first_message_id)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    if question_prompt_message_id:
        try:
            await callback_query.message.chat.delete_message(message_id=question_prompt_message_id)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ç–æ—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    await callback_query.message.answer(selected_category, reply_markup=create_back_button())


@router.callback_query(lambda callback: callback.data == "go_back_to_categories")
async def handle_back_button(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.delete()

    sections_keyboard = create_sections_keyboard()

    first_message = await callback_query.message.answer(
        "–£—Ä–∞, –≤–∞—à–∞ –º–∞—Ç—Ä–∏—Ü–∞ —Å—É–¥—å–±—ã –≥–æ—Ç–æ–≤–∞ üîÆ\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–∫–ª–∞–¥ –ø–æ –∫–∞–∂–¥–æ–º—É –∏–∑ —Ä–∞–∑–¥–µ–ª–æ–≤.\n"
        "‚úÖ - –¥–æ—Å—Ç—É–ø–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ\n"
        "üîê - —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø",
        reply_markup=sections_keyboard
    )
    await state.update_data(first_message_id=first_message.message_id)

    three_functions = functions_keyboard()

    question_prompt_message = await callback_query.message.answer(
        f"–ü–æ–ª—É—á–∏—Ç–µ <b>–æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤—Å–µ —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã</b> —Å –ü–û–õ–ù–´–ú –¥–æ—Å—Ç—É–ø–æ–º –∫:\nüîÆ –ú–∞—Ç—Ä–∏—Ü–µ —Å—É–¥—å–±—ã\nüí∏ –ù—É–º–µ—Ä–æ–ª–æ–≥–∏–∏"
        " | –õ–∏—á–Ω–æ–º—É —É—Å–ø–µ—Ö—É | –§–∏–Ω–∞–Ω—Å–∞–º\nüíï –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º\n\n–ò–ª–∏ <b>–∑–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å</b> –Ω–∞—à–µ–º—É "
        "–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º—É –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É –∏ –ø–æ–ª—É—á–∏—Ç–µ –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: üíï<b>–ö–∞–∫ —É–ª—É—á—à–∏—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º?</b>)",
        reply_markup=three_functions,
        parse_mode="HTML"
    )

    await state.update_data(question_prompt_message_id=question_prompt_message.message_id)

