from aiogram import Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from openai import AsyncOpenAI

import config
from keyboards.back_to_menu import create_back_button
from keyboards.sections_fate_matrix import create_sections_keyboard
from services.gpt_service import generate_gpt_response
from states import QuestionState

router = Router()

client = AsyncOpenAI(api_key=config.OPENAI_API_KEY)


@router.callback_query(lambda callback: callback.data == "get_full_access")
async def handle_full_access(callback_query: CallbackQuery):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–¢–∞—Ä–∏—Ñ 1 (290 —Ä—É–±.)", callback_data="tariff_1")],
            [InlineKeyboardButton(text="–¢–∞—Ä–∏—Ñ 2 (490 —Ä—É–±.)", callback_data="tariff_2")],
            [InlineKeyboardButton(text="–¢–∞—Ä–∏—Ñ 3 (790 —Ä—É–±.)", callback_data="tariff_3")]
        ]
    )

    await callback_query.message.answer(
        "–¢–∞—Ä–∏—Ñ 1. \n- 5 —Ä–∞—Å–∫–ª–∞–¥–æ–≤ (–ª—é–±—ã—Ö) \n- 10 –≤–æ–ø—Ä–æ—Å–æ–≤ \nüí≤ 290 —Ä—É–±–ª–µ–π\n\n"
        "–¢–∞—Ä–∏—Ñ 2.\n- 8 —Ä–∞—Å–∫–ª–∞–¥–æ–≤ (–ª—é–±—ã—Ö)\n- 20 –≤–æ–ø—Ä–æ—Å–æ–≤\nüí≤ 490 —Ä—É–±–ª–µ–π\n\n"
        "–¢–∞—Ä–∏—Ñ 3.\n- 15 —Ä–∞—Å–∫–ª–∞–¥–æ–≤ (–ª—é–±—ã—Ö)\n- 40 –≤–æ–ø—Ä–æ—Å–æ–≤\nüí≤ 790 —Ä—É–±–ª–µ–π",
        reply_markup=keyboard
    )

async def handle_section(callback_query: CallbackQuery, state: FSMContext, category: str):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    first_message_id = data.get("first_message_id")
    if first_message_id:
        try:
            await callback_query.bot.delete_message(callback_query.message.chat.id, first_message_id)
        except Exception as e:
            print(f"Error deleting first message with ID {first_message_id}: {e}")

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
    second_message_id = data.get("second_message_id")
    if second_message_id:
        try:
            await callback_query.bot.delete_message(callback_query.message.chat.id, second_message_id)
        except Exception as e:
            print(f"Error deleting second message with ID {second_message_id}: {e}")

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    generating_message = await callback_query.message.answer("‚è≥")

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞
    response_text = await generate_gpt_response(data.get("user_name"), data.get("user_date"), category)

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –∑–∞–≥—Ä—É–∑–∫–∏
    await generating_message.delete()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
    first_message = await callback_query.message.answer(response_text, reply_markup=create_back_button())
    await state.update_data(first_message_id=first_message.message_id)

    # –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
    inline_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø", callback_data="get_full_access")],
        [InlineKeyboardButton(text="–ó–∞–¥–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å", callback_data="ask_free_question")],
        [InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])

    second_message = await callback_query.message.answer(
        "–ü–æ–ª—É—á–∏—Ç–µ <b>–æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤—Å–µ —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã</b> —Å –ü–û–õ–ù–´–ú –¥–æ—Å—Ç—É–ø–æ–º –∫:\nüîÆ –ú–∞—Ç—Ä–∏—Ü–µ —Å—É–¥—å–±—ã\nüí∏ –ù—É–º–µ—Ä–æ–ª–æ–≥–∏–∏"
        " | –õ–∏—á–Ω–æ–º—É —É—Å–ø–µ—Ö—É | –§–∏–Ω–∞–Ω—Å–∞–º\nüíï –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º\n\n–ò–ª–∏ <b>–∑–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å</b> –Ω–∞—à–µ–º—É "
        "–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º—É –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É –∏ –ø–æ–ª—É—á–∏—Ç–µ –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: üíï<b>–ö–∞–∫ —É–ª—É—á—à–∏—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å "
        "–ø–∞—Ä—Ç–Ω–µ—Ä–æ–º?</b>)",
        reply_markup=inline_keyboard,
        parse_mode="HTML"
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤—Ç–æ—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await state.update_data(second_message_id=second_message.message_id)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ ID —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    await state.update_data(previous_message_ids=[first_message.message_id, second_message.message_id])

@router.callback_query(lambda callback: callback.data.startswith("section_"))
async def handle_section_callback(callback_query: CallbackQuery, state: FSMContext):
    free_categories = {
        "section_personal": "–õ–∏—á–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞",
        "section_destiny": "–ü—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ",
        "section_family_relationships": "–î–µ—Ç—Å–∫–æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è",
        "section_talents": "–¢–∞–ª–∞–Ω—Ç—ã",
    }

    category_mapping = {
        "section_personal": "–õ–∏—á–Ω–æ—Å—Ç–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞",
        "section_destiny": "–ü—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ",
        "section_talents": "–¢–∞–ª–∞–Ω—Ç—ã",
        "section_family_relationships": "–î–µ—Ç—Å–∫–æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è",
        "section_generic_programs": "–†–æ–¥–æ–≤—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã",
        "section_karmic_tail": "–ö–∞—Ä–º–∏—á–µ—Å–∫–∏–π —Ö–≤–æ—Å—Ç",
        "section_karmic_lesson": "–ì–ª–∞–≤–Ω—ã–π –∫–∞—Ä–º–∏—á–µ—Å–∫–∏–π —É—Ä–æ–∫",
        "section_relationships": "–û—Ç–Ω–æ—à–µ–Ω–∏—è",
        "section_money": "–î–µ–Ω—å–≥–∏",
        "section_definition_of_castes": "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Å—Ç"
    }

    category = category_mapping.get(callback_query.data, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è")

    if callback_query.data not in free_categories:
        data = await state.get_data()
        previous_warning_message_id = data.get("previous_warning_message_id")
        if previous_warning_message_id:
            try:
                await callback_query.bot.delete_message(
                    chat_id=callback_query.message.chat.id,
                    message_id=previous_warning_message_id
                )
            except Exception as e:
                if "message to delete not found" not in str(e):
                    print(f"Error deleting previous warning message: {e}")

        warning_message = await callback_query.message.answer(
            "–≠—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–∫—Ä–æ–π—Ç–µ –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø."
        )
        await state.update_data(previous_warning_message_id=warning_message.message_id)
        return

    await handle_section(callback_query, state, category)


@router.callback_query(lambda callback: callback.data == "go_back_to_categories")
async def go_back_to_categories(callback_query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    first_message_id = data.get("first_message_id")
    question_prompt_message_id = data.get("question_prompt_message_id")

    if first_message_id:
        try:
            await callback_query.bot.delete_message(
                chat_id=callback_query.message.chat.id,
                message_id=first_message_id
            )
        except Exception as e:
            print(f"Error deleting current message: {e}")

    if question_prompt_message_id:
        try:
            await callback_query.bot.delete_message(
                chat_id=callback_query.message.chat.id,
                message_id=question_prompt_message_id
            )
        except Exception as e:
            print(f"Error deleting question prompt message: {e}")

    sections_keyboard = create_sections_keyboard()
    first_message = await callback_query.message.answer(
        "–£—Ä–∞, –≤–∞—à–∞ –º–∞—Ç—Ä–∏—Ü–∞ —Å—É–¥—å–±—ã –≥–æ—Ç–æ–≤–∞ üîÆ\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–∫–ª–∞–¥ –ø–æ –∫–∞–∂–¥–æ–º—É –∏–∑ —Ä–∞–∑–¥–µ–ª–æ–≤.\n"
        "‚úÖ - –¥–æ—Å—Ç—É–ø–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ\n"
        "üîê - —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø",
        reply_markup=sections_keyboard
    )

    await state.update_data(first_message_id=first_message.message_id)

    inline_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø", callback_data="get_full_access")],
        [InlineKeyboardButton(text="–ó–∞–¥–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å", callback_data="ask_free_question")],
        [InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])

    second_message = await callback_query.message.answer(
        f"–ü–æ–ª—É—á–∏—Ç–µ <b>–æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤—Å–µ —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã</b> —Å –ü–û–õ–ù–´–ú –¥–æ—Å—Ç—É–ø–æ–º –∫:\nüîÆ –ú–∞—Ç—Ä–∏—Ü–µ —Å—É–¥—å–±—ã\nüí∏ –ù—É–º–µ—Ä–æ–ª–æ–≥–∏–∏"
        " | –õ–∏—á–Ω–æ–º—É —É—Å–ø–µ—Ö—É | –§–∏–Ω–∞–Ω—Å–∞–º\nüíï –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º\n\n–ò–ª–∏ <b>–∑–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å</b> –Ω–∞—à–µ–º—É "
        "–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º—É –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É –∏ –ø–æ–ª—É—á–∏—Ç–µ –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: üíï<b>–ö–∞–∫ —É–ª—É—á—à–∏—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å "
        "–ø–∞—Ä—Ç–Ω–µ—Ä–æ–º?</b>)",
        reply_markup=inline_keyboard,
        parse_mode="HTML"
    )

    await state.update_data(second_message_id=second_message.message_id)
