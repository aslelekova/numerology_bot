# handlers/sections_handler.py

from aiogram import Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from openai import AsyncOpenAI

import config
from keyboards.back_to_menu import create_back_button
from keyboards.sections_fate_matrix import create_sections_keyboard
from services.birthday_service import calculate_values
from services.gpt_service import generate_gpt_response, EventHandler
from states import QuestionState

router = Router()

client = AsyncOpenAI(api_key=config.OPENAI_API_KEY)


@router.callback_query(lambda callback: callback.data == "get_full_access")
async def handle_full_access(callback_query: CallbackQuery):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–¢–∞—Ä–∏—Ñ 1 (290 —Ä—É–±.)", callback_data="tariff_1")],
            [InlineKeyboardButton(text="–¢–∞—Ä–∏—Ñ 2 (490 —Ä—É–±.)", callback_data="tariff_2")],
            [InlineKeyboardButton(text="–¢–∞—Ä–∏—Ñ 3 (790 —Ä—É–±.)", callback_data="tariff_3")]
        ]
    )

    await callback_query.message.answer(
        "–¢–∞—Ä–∏—Ñ 1. \n- 5 —Ä–∞—Å–∫–ª–∞–¥–æ–≤ (–ª—é–±—ã—Ö) \n- 10 –≤–æ–ø—Ä–æ—Å–æ–≤ \nüí≤ 290 —Ä—É–±–ª–µ–π\n\n"
        "–¢–∞—Ä–∏—Ñ 2.\n- 8 —Ä–∞—Å–∫–ª–∞–¥–æ–≤ (–ª—é–±—ã—Ö)\n- 20 –≤–æ–ø—Ä–æ—Å–æ–≤\nüí≤ 490 —Ä—É–±–ª–µ–π\n\n"
        "–¢–∞—Ä–∏—Ñ 3.\n- 15 —Ä–∞—Å–∫–ª–∞–¥–æ–≤ (–ª—é–±—ã—Ö)\n- 40 –≤–æ–ø—Ä–æ—Å–æ–≤\nüí≤ 790 —Ä—É–±–ª–µ–π",
        reply_markup=keyboard
    )

async def handle_section(callback_query: CallbackQuery, state: FSMContext):

    data = await state.get_data()


    categories_dict = data.get("full_response", {})
    print(categories_dict)


    category_key = callback_query.data
    selected_category = categories_dict.get(category_key, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è")

    if selected_category == "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è":
        await callback_query.message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é.")
        return


    await callback_query.message.answer(selected_category, reply_markup=create_back_button())


@router.callback_query(lambda callback: callback.data.startswith("section_"))
async def handle_section_callback(callback_query: CallbackQuery, state: FSMContext):
    category_mapping = {
        "section_personal": "–õ–∏—á–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞",
        "section_destiny": "–ü—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ",
        "section_talents": "–¢–∞–ª–∞–Ω—Ç—ã",
        "section_family_relationships": "–î–µ—Ç—Å–∫–æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è",
        "section_generic_programs": "–†–æ–¥–æ–≤—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã",
        "section_karmic_tail": "–ö–∞—Ä–º–∏—á–µ—Å–∫–∏–π —Ö–≤–æ—Å—Ç",
        "section_karmic_lesson": "–ì–ª–∞–≤–Ω—ã–π –∫–∞—Ä–º–∏—á–µ—Å–∫–∏–π —É—Ä–æ–∫",
        "section_relationships": "–û—Ç–Ω–æ—à–µ–Ω–∏—è",
        "section_money": "–î–µ–Ω—å–≥–∏",
    }

    category_key = callback_query.data
    category = category_mapping.get(category_key, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è")

    if category == "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è":
        await callback_query.message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é.")
        return

    data = await state.get_data()
    response_text = data.get("full_response", {})

    if not isinstance(response_text, dict):
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")
        return

    selected_category = response_text.get(category, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è")

    if selected_category == "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è":
        await callback_query.message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    first_message_id = data.get("first_message_id")
    question_prompt_message_id = data.get("question_prompt_message_id")

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if first_message_id:
        try:
            await callback_query.message.chat.delete_message(message_id=first_message_id)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    if question_prompt_message_id:
        try:
            await callback_query.message.chat.delete_message(message_id=question_prompt_message_id)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ç–æ—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
    await callback_query.message.answer(selected_category, reply_markup=create_back_button())
