from yookassa import Configuration, Payment
import uuid
import traceback
from aiogram.fsm.context import FSMContext
from aiogram import Router
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from services.message_service import delete_messages, send_initial_messages
from keyboards.sections_fate_matrix import create_sections_keyboard, functions_keyboard
from config import secret_key, shop_id

router = Router()

Configuration.account_id = shop_id
Configuration.secret_key = secret_key

print(shop_id, secret_key)
@router.callback_query(lambda callback: callback.data == "get_full_access")
async def handle_full_access(callback_query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    first_message_id = data.get("first_message_id")
    question_prompt_message_id = data.get("question_prompt_message_id")

    await delete_messages(callback_query.bot, callback_query.message.chat.id, [first_message_id, question_prompt_message_id])

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="290 —Ä—É–±", callback_data="tariff_1")],
            [InlineKeyboardButton(text="450 —Ä—É–±", callback_data="tariff_2"),
             InlineKeyboardButton(text="650 —Ä—É–±", callback_data="tariff_3")],
             [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back")]
        ]
    )

    await callback_query.message.answer(
        "–ú—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ –¥–ª—è —Ç–µ–±—è 3 —Ç–∞—Ä–∏—Ñ–∞ üí´\n\n–¢–∞—Ä–∏—Ñ 1.  290 —Ä—É–±–ª–µ–π\nüîÆ 5 –ª—é–±—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–≤\n‚ö°Ô∏è 10 –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã \n\n–¢–∞—Ä–∏—Ñ 2.  450 —Ä—É–±–ª–µ–π  (–ø–æ–ø—É–ª—è—Ä–Ω—ã–π)\nüîÆ 8 –ª—é–±—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–≤\n‚ö°Ô∏è 20 –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã \n\n–¢–∞—Ä–∏—Ñ 3.  650 —Ä—É–±–ª–µ–π \nüîÆ 15 –ª—é–±—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–≤\n‚ö°Ô∏è 40 –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã \n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ç–∞—Ä–∏—Ñ–æ–≤",
        reply_markup=keyboard
    )


async def create_payment(amount, description):


    try:
        payment = Payment.create({
            "amount": {
                "value": f"{amount}",
                "currency": "RUB"
            },
            "confirmation": {
                "type": "redirect",
                "return_url": "https://t.me/MakeMyMatrix_Bot"
            },
            "capture": True,
            "description": description
        }, uuid.uuid4())

        return payment.confirmation.confirmation_url
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        print(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–ª–∞—Ç–µ–∂–∞: Amount: {amount}, Currency: RUB, Description: {description}")
        print(traceback.format_exc())



@router.callback_query(lambda callback: callback.data == "tariff_1")
async def handle_tariff_1(callback_query: CallbackQuery):
    confirmation_url = await create_payment("290.00", "–¢–∞—Ä–∏—Ñ 1: 290 —Ä—É–±–ª–µ–π")
    
    if confirmation_url:
        await callback_query.message.answer(f"–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: {confirmation_url}")
    else:
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.callback_query(lambda callback: callback.data == "tariff_2")
async def handle_tariff_2(callback_query: CallbackQuery):

    confirmation_url = await create_payment(450, "–¢–∞—Ä–∏—Ñ 2: 450 —Ä—É–±–ª–µ–π")
    
    if confirmation_url:
        await callback_query.message.answer(f"–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: {confirmation_url}")
    else:
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.callback_query(lambda callback: callback.data == "tariff_3")
async def handle_tariff_3(callback_query: CallbackQuery):

    confirmation_url = await create_payment(650, "–¢–∞—Ä–∏—Ñ 3: 650 —Ä—É–±–ª–µ–π")
    
    if confirmation_url:
        await callback_query.message.answer(f"–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: {confirmation_url}")
    else:
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def check_payment_status(payment_id):
    payment_info = Payment.find_one(payment_id)
    return payment_info.status


@router.callback_query(lambda callback: callback.data == "back")
async def handle_back_button(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.delete()

    section_message = "–£—Ä–∞, –≤–∞—à–∞ –º–∞—Ç—Ä–∏—Ü–∞ —Å—É–¥—å–±—ã –≥–æ—Ç–æ–≤–∞ üîÆ\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–∫–ª–∞–¥ –ø–æ –∫–∞–∂–¥–æ–º—É –∏–∑ —Ä–∞–∑–¥–µ–ª–æ–≤.\n‚úÖ - –¥–æ—Å—Ç—É–ø–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ\nüîê - —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø"
    question_message = ("–ü–æ–ª—É—á–∏—Ç–µ <b>–æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤—Å–µ —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã</b> —Å –ü–û–õ–ù–´–ú –¥–æ—Å—Ç—É–ø–æ–º –∫:\nüîÆ –ú–∞—Ç—Ä–∏—Ü–µ —Å—É–¥—å–±—ã\nüí∏ –ù—É–º–µ—Ä–æ–ª–æ–≥–∏–∏"
                        " | –õ–∏—á–Ω–æ–º—É —É—Å–ø–µ—Ö—É | –§–∏–Ω–∞–Ω—Å–∞–º\nüíï –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º\n\n–ò–ª–∏ <b>–∑–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å</b> –Ω–∞—à–µ–º—É "
                        "–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º—É –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É –∏ –ø–æ–ª—É—á–∏—Ç–µ –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: üíï<b>–ö–∞–∫ —É–ª—É—á—à–∏—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º?</b>)")
    await send_initial_messages(callback_query.bot, callback_query.message.chat.id, state, section_message, question_message, create_sections_keyboard(), functions_keyboard())
