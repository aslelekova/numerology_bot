import sqlite3
import requests
from yookassa import Configuration, Payment
import uuid
import traceback
from aiogram.fsm.context import FSMContext
from aiogram import Router, types
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from services.db_service import get_subscription_details
from services.message_service import delete_messages, send_initial_messages
from keyboards.sections_fate_matrix import create_full_sections_keyboard, create_sections_keyboard, functions_keyboard
from config import secret_key, shop_id
  
router = Router()

Configuration.account_id = shop_id
Configuration.secret_key = secret_key


@router.callback_query(lambda callback: callback.data == "get_full_access")
async def handle_full_access(callback_query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    first_message_id = data.get("first_message_id")
    question_prompt_message_id = data.get("question_prompt_message_id")

    await delete_messages(callback_query.bot, callback_query.message.chat.id, [first_message_id, question_prompt_message_id])

    payment_url_1, payment_id_1 = await create_payment("1.00", callback_query.message.chat.id, "–¢–∞—Ä–∏—Ñ 1. 290 —Ä—É–±")
    payment_url_2, payment_id_2 = await create_payment("1.00", callback_query.message.chat.id, "–¢–∞—Ä–∏—Ñ 2. 450 —Ä—É–±")
    payment_url_3, payment_id_3 = await create_payment("1.00", callback_query.message.chat.id, "–¢–∞—Ä–∏—Ñ 3. 650 —Ä—É–±")

    await state.update_data(payment_id=payment_id_1)

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="290 —Ä—É–±", url=payment_url_1)],
            [InlineKeyboardButton(text="450 —Ä—É–±", url=payment_url_2),
             InlineKeyboardButton(text="650 —Ä—É–±", url=payment_url_3)],
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back")]
        ]
    )

    await callback_query.message.answer(
        "–ú—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ –¥–ª—è —Ç–µ–±—è 3 —Ç–∞—Ä–∏—Ñ–∞ üí´\n\n–¢–∞—Ä–∏—Ñ 1.  290 —Ä—É–±–ª–µ–π\nüîÆ 5 –ª—é–±—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–≤\n‚ö°Ô∏è 10 –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã \n\n–¢–∞—Ä–∏—Ñ 2.  450 —Ä—É–±–ª–µ–π  (–ø–æ–ø—É–ª—è—Ä–Ω—ã–π)\nüîÆ 8 –ª—é–±—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–≤\n‚ö°Ô∏è 20 –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã \n\n–¢–∞—Ä–∏—Ñ 3.  650 —Ä—É–±–ª–µ–π \nüîÆ 15 –ª—é–±—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–≤\n‚ö°Ô∏è 40 –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã \n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ç–∞—Ä–∏—Ñ–æ–≤",
        reply_markup=keyboard
    )

    await callback_query.message.answer(
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_payment")],
                [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back")]
            ]
        )
    )

async def create_payment(amount, chat_id, description):
    try:
        payment = Payment.create({
            "amount": {
                "value": amount,
                "currency": "RUB"
            },
            "confirmation": {
                "type": "redirect",
                "return_url": "https://t.me/MakeMyMatrix_Bot"
            },
            "capture": True,
            "description": description,
            "receipt": {
                "customer": {
                    "full_name": "–ò–º—è –§–∞–º–∏–ª–∏—è",
                    "email": "example@example.com",
                    "phone": "+79000000000"
                },
                "items": [
                    {
                        "description": "–£—Å–ª—É–≥–∞ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –º–∞—Ç—Ä–∏—Ü—ã —Å—É–¥—å–±—ã",
                        "quantity": "1.00",
                        "amount": {
                            "value": amount,
                            "currency": "RUB"
                        },
                        "vat_code": 1,
                        "payment_mode": "full_prepayment",
                        "payment_subject": "service"
                    }
                ]
            }
        }, uuid.uuid4())

        return payment.confirmation.confirmation_url, payment.id

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        print(traceback.format_exc())

@router.callback_query(lambda callback: callback.data == "check_payment")
async def check_payment_status(callback_query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    payment_id = data.get("payment_id")  

    if not payment_id:
        await callback_query.message.answer("–û—à–∏–±–∫–∞: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    try:
        payment = Payment.find_one(payment_id)

        if payment.status == "succeeded":
            await update_user_tariff(callback_query, callback_query.message.chat.id, payment.description)
            await callback_query.message.answer("–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! üéâ –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω.")
            user_id = callback_query.from_user.id

            subscription_details = await get_subscription_details(user_id)
            readings_left = subscription_details["readings_left"]
            questions_left = subscription_details["questions_left"]
            sections_keyboard = create_full_sections_keyboard()
            first_message = await callback_query.message.answer(
                f"–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å:\nüîÆ {readings_left} –ª—é–±—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–≤\n‚ö°Ô∏è {questions_left} –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã",
                reply_markup=sections_keyboard
            )
            await state.update_data(first_message_id=first_message.message_id)

            question_prompt_message = await callback_query.message.answer(
                    f"–°–¥–µ–ª–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç:  \nüîÆ –ú–∞—Ç—Ä–∏—Ü–∞ —Å—É–¥—å–±—ã\nüí∏ –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è | –õ–∏—á–Ω–æ–º—É —É—Å–ø–µ—Ö—É | –§–∏–Ω–∞–Ω—Å–∞–º\nüíï –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º\n\n–ò–ª–∏ <b>–∑–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å</b> –Ω–∞—à–µ–º—É "
                "–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º—É –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É –∏ –ø–æ–ª—É—á–∏—Ç–µ –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: üíï<b>–ö–∞–∫ —É–ª—É—á—à–∏—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º?</b>)",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç", callback_data="main_menu")],
                    [InlineKeyboardButton(text="–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="ask_free_question")],
                    [InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                    ]),
                    parse_mode="HTML"
                )

            await state.update_data(question_prompt_message_id=question_prompt_message.message_id)
        elif payment.status == "pending":
            await callback_query.message.answer("–û–ø–ª–∞—Ç–∞ –ø–æ–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        else:
            await callback_query.message.answer("–û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        print(traceback.format_exc())
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")


async def update_user_tariff(callback_query: CallbackQuery, chat_id, description):
    user_id = callback_query.from_user.id

    subscription_details = await get_subscription_details(user_id)
    readings_left = subscription_details["readings_left"]
    questions_left = subscription_details["questions_left"]
    tariff = None

    if "–¢–∞—Ä–∏—Ñ 1" in description:
        tariff = "–¢–∞—Ä–∏—Ñ 1"
        readings_left += 5
        questions_left += 10
    elif "–¢–∞—Ä–∏—Ñ 2" in description:
        tariff = "–¢–∞—Ä–∏—Ñ 2"
        readings_left += 8
        questions_left += 20
    elif "–¢–∞—Ä–∏—Ñ 3" in description:
        tariff = "–¢–∞—Ä–∏—Ñ 3"
        readings_left += 15
        questions_left += 40

    if tariff:
        connect = sqlite3.connect('users.db')
        cursor = connect.cursor()

        cursor.execute("""
            UPDATE login_id
            SET tariff = ?, readings_left = ?, questions_left = ?, subscription_active = 1
            WHERE id = ?
        """, (tariff, readings_left, questions_left, chat_id))

        connect.commit()
        connect.close()



@router.callback_query(lambda callback: callback.data == "back")
async def handle_back_button(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.delete()

    section_message = "–£—Ä–∞, –≤–∞—à–∞ –º–∞—Ç—Ä–∏—Ü–∞ —Å—É–¥—å–±—ã –≥–æ—Ç–æ–≤–∞ üîÆ\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–∫–ª–∞–¥ –ø–æ –∫–∞–∂–¥–æ–º—É –∏–∑ —Ä–∞–∑–¥–µ–ª–æ–≤.\n‚úÖ - –¥–æ—Å—Ç—É–ø–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ\nüîê - —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø"
    question_message = ("–ü–æ–ª—É—á–∏—Ç–µ <b>–æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤—Å–µ —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã</b> —Å –ü–û–õ–ù–´–ú –¥–æ—Å—Ç—É–ø–æ–º –∫:\nüîÆ –ú–∞—Ç—Ä–∏—Ü–µ —Å—É–¥—å–±—ã\nüí∏ –ù—É–º–µ—Ä–æ–ª–æ–≥–∏–∏"
                        " | –õ–∏—á–Ω–æ–º—É —É—Å–ø–µ—Ö—É | –§–∏–Ω–∞–Ω—Å–∞–º\nüíï –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º\n\n–ò–ª–∏ <b>–∑–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å</b> –Ω–∞—à–µ–º—É "
                        "–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º—É –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É –∏ –ø–æ–ª—É—á–∏—Ç–µ –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: üíï<b>–ö–∞–∫ —É–ª—É—á—à–∏—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º?</b>)")
    await send_initial_messages(callback_query.bot, callback_query.message.chat.id, state, section_message, question_message, create_sections_keyboard(), functions_keyboard())
