# handlers/compatibility_handler.py

from aiogram import Router, F, types
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from start_handler import cmd_start
from states import Form
from aiogram.filters.state import StateFilter

router = Router()


@router.callback_query(F.data == "compatibility")
async def handle_compatibility(call: CallbackQuery, state: FSMContext):
    await state.update_data(category='compatibility')

    message_text = "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–µ—Ä–≤–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞:"
    await prompt_for_name_first(call, state, message_text)

async def prompt_for_name_first(call: CallbackQuery, state: FSMContext, message_text: str):
    await call.message.delete()
    prompt_message = await call.message.answer(message_text)
    await state.update_data(prompt_message_id=prompt_message.message_id)
    await state.set_state(Form.waiting_for_name_first)

@router.message(StateFilter(Form.waiting_for_name_first))
async def handle_first_name_input(message: types.Message, state: FSMContext):
    first_name = message.text
    await state.update_data(first_name=first_name)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–æ–∑—Ä–∞—Å—Ç –ø–µ—Ä–≤–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞
    await message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –ø–µ—Ä–≤–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞:")
    await state.set_state(Form.waiting_for_age_first)

@router.message(StateFilter(Form.waiting_for_age_first))
async def handle_first_age_input(message: types.Message, state: FSMContext):
    first_age = message.text
    await state.update_data(first_age=first_age)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è –≤—Ç–æ—Ä–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞
    await message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤—Ç–æ—Ä–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞:")
    await state.set_state(Form.waiting_for_name_second)

@router.message(StateFilter(Form.waiting_for_name_second))
async def handle_second_name_input(message: types.Message, state: FSMContext):
    second_name = message.text
    await state.update_data(second_name=second_name)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–æ–∑—Ä–∞—Å—Ç –≤—Ç–æ—Ä–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞
    await message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –≤—Ç–æ—Ä–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞:")
    await state.set_state(Form.waiting_for_age_second)

@router.message(StateFilter(Form.waiting_for_age_second))
async def handle_second_age_input(message: types.Message, state: FSMContext):
    second_age = message.text
    await state.update_data(second_age=second_age)

    # –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å, –∏—Å–ø–æ–ª—å–∑—É—è –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    first_name = data.get("first_name")
    first_age = data.get("first_age")
    second_name = data.get("second_name")
    second_age = data.get("second_age")

    # –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä:
    response_text = f"–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –º–µ–∂–¥—É {first_name} ({first_age} –ª–µ—Ç) –∏ {second_name} ({second_age} –ª–µ—Ç)."
    
    await message.answer(response_text)
    await cmd_start(message, state)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

