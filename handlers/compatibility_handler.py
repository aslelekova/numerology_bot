# handlers/compatibility_handler.py

from aiogram import Router, F, types
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.filters.callback_data import CallbackData
from calendar_module.calendar_utils import get_user_locale
from handlers.start_handler import cmd_start
from services.birthday_service import calculate_houses
from services.calendar_service import process_calendar_selection, start_calendar
from services.db_service import get_subscription_details
from services.gpt_service import setup_assistant_and_vector_store
from services.gpt_service_num import generate_gpt_response_numerology
from services.user_service import get_user_data, update_user_date
from states import Form
from aiogram.filters.state import StateFilter

router = Router()


@router.callback_query(F.data == "compatibility")
async def handle_numerology(call: CallbackQuery, state: FSMContext):
    await state.update_data(category='compatibility')

    message_text = (
        "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞ ‚Ññ1:"
    )
    await prompt_for_name_compatibility(call, state, message_text, Form.waiting_for_name_first)

async def prompt_for_name_compatibility(call: CallbackQuery, state: FSMContext, message_text: str, next_state: str):
    await call.message.delete()
    prompt_message = await call.message.answer(message_text)
    await state.update_data(prompt_message_id=prompt_message.message_id)
    await state.set_state(next_state)


@router.message(StateFilter(Form.waiting_for_name_first))
async def handle_params_input(message: types.Message, state: FSMContext):
    user_name = message.text
    await update_user_date(state, user_name)

    data = await state.get_data()
    prompt_message_id = data.get("prompt_message_id")

    if prompt_message_id:
        try:
            await message.bot.delete_message(chat_id=message.chat.id, message_id=prompt_message_id)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    try:
        await message.delete()

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

    date_prompt_message = await message.answer(
        "üóì –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞ ‚Ññ1",
        reply_markup=await start_calendar(locale=await get_user_locale(message.from_user))
    )
    await state.update_data(date_prompt_message_id=date_prompt_message.message_id)
    await state.set_state(Form.waiting_for_data_first)

@router.callback_query(lambda callback: callback.data.startswith("date_"), StateFilter(Form.waiting_for_data_first))
async def handle_first_partner_date(callback_query: CallbackQuery, state: FSMContext):
    selected, date = await process_calendar_selection(callback_query)
    if selected:
        await update_user_date(state, date)

        await callback_query.message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞ ‚Ññ2:")
        await state.set_state(Form.waiting_for_name_second)

@router.message(StateFilter(Form.waiting_for_name_second))
async def handle_second_partner_name(message: types.Message, state: FSMContext):
    partner_two_name = message.text
    await update_user_date(state, partner_two_name)

    # –ó–∞–ø—Ä–æ—Å –≤–æ–∑—Ä–∞—Å—Ç–∞ –≤—Ç–æ—Ä–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
    await message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–∞ ‚Ññ2:")
    await state.set_state(Form.waiting_for_age_second)


async def process_selecting_category_com(callback_query: CallbackQuery, callback_data: CallbackData, state: FSMContext):
    selected, date = await process_calendar_selection(callback_query, callback_data)
    
    if selected:
        user_name, _ = await get_user_data(state)
        await update_user_date(state, date)

        day, month, year = date.day, date.month, date.year
        
        data = await state.get_data()
        print(data)
#         previous_message_id = data.get("date_prompt_message_id")

#         if previous_message_id:
#             try:
#                 await callback_query.message.bot.delete_message(chat_id=callback_query.message.chat.id, message_id=previous_message_id)
#             except Exception as e:
#                 print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º: {e}")

#         generating_message = await callback_query.message.answer("‚è≥")
#         assistant = await setup_assistant_and_vector_store()
#         energies = calculate_houses(user_name, day, month, year)
#         response_text = None
#         max_retries = 10
#         attempt = 0
#         while response_text is None and attempt < max_retries:
#             attempt += 1
#             response_text = await generate_gpt_response_numerology(user_name, energies, assistant)
#             if not response_text:
#                 print(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt}: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç.")

#         await state.update_data(response_text=response_text)

#         await generating_message.delete()

#         if not response_text:
#             await callback_query.message.answer(
#                 "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.",
#             )
#             await cmd_start(callback_query.message, state)
#             return

#         response_text = response_text.replace("#", "").replace("*", "")
#         split_text = response_text.split("---")
#         categories = [
#             "–õ–∏—á–Ω–æ—Å—Ç—å –∏ –ø—Å–∏—Ö–∏–∫–∞",
#             "–ß—É–≤—Å—Ç–≤–∞ –∏ —Å–∞–º–æ—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è",
#             "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏ –¥—É—Ö–æ–≤–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ",
#             "–û—Ç–Ω–æ—à–µ–Ω–∏—è –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å",
#             "–û–ø—ã—Ç –∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ñ–µ—Ä–∞",
#             "–õ–∏—á–Ω–∞—è —Å–∏–ª–∞ –∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è",
#             "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±–∞–ª–∞–Ω—Å",
#             "–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –∏ —Å–µ–º–µ–π–Ω–∞—è —Å—Ñ–µ—Ä–∞",
#         ]

#         categories_dict = {category: split_text[i].strip() for i, category in enumerate(categories) if i < len(split_text)}

#         await state.update_data(full_response=categories_dict)
#         user_id = callback_query.from_user.id
#         subscription_details = await get_subscription_details(user_id)
#         subscription_active = subscription_details["subscription_active"]
#         readings_left = subscription_details["readings_left"]
#         questions_left = subscription_details["questions_left"]
        
#         if subscription_active:  
#             sections_keyboard = create_full_sections_keyboard_num()
#             first_message = await callback_query.message.answer(
#                 f"–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å:\nüîÆ {readings_left} –ª—é–±—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–≤\n‚ö°Ô∏è {questions_left} –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã",
#                 reply_markup=sections_keyboard
#             )
#             await state.update_data(first_message_id=first_message.message_id)

#             question_prompt_message = await callback_query.message.answer(
#                     f"–°–¥–µ–ª–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç:  \nüîÆ –ú–∞—Ç—Ä–∏—Ü–∞ —Å—É–¥—å–±—ã\nüí∏ –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è | –õ–∏—á–Ω–æ–º—É —É—Å–ø–µ—Ö—É | –§–∏–Ω–∞–Ω—Å–∞–º\nüíï –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º\n\n–ò–ª–∏ <b>–∑–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å</b> –Ω–∞—à–µ–º—É "
#                 "–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º—É –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É –∏ –ø–æ–ª—É—á–∏—Ç–µ –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: üíï<b>–ö–∞–∫ —É–ª—É—á—à–∏—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º?</b>)",
#                     reply_markup=InlineKeyboardMarkup(inline_keyboard=[
#                     [InlineKeyboardButton(text="–ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç", callback_data="main_menu")],
#                     [InlineKeyboardButton(text="–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="ask_free_question")],
#                     [InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
#                     ]),
#                     parse_mode="HTML"
#                 )

#             await state.update_data(question_prompt_message_id=question_prompt_message.message_id)
#         else:
#             sections_keyboard = create_sections_keyboard_num()
#             first_message = await callback_query.message.answer(
#                 "–£—Ä–∞, –≤–∞—à —Ä–∞—Å—á–µ—Ç –ø–æ –ù—É–º–µ—Ä–æ–ª–æ–≥–∏–∏ | –õ–∏—á–Ω–æ–º—É —É—Å–ø–µ—Ö—É | –§–∏–Ω–∞–Ω—Å–∞–º –≥–æ—Ç–æ–≤ üí∏\n\n"
#                 "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–∫–ª–∞–¥ –ø–æ –∫–∞–∂–¥–æ–º—É –∏–∑ —Ä–∞–∑–¥–µ–ª–æ–≤.\n"
#                 "‚úÖ - –¥–æ—Å—Ç—É–ø–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ\n"
#                 "üîê - —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø",
#                 reply_markup=sections_keyboard
#             )
#             await state.update_data(first_message_id=first_message.message_id)

#             three_functions = functions_keyboard()
#             question_prompt_message = await callback_query.message.answer(
#                 f"–ü–æ–ª—É—á–∏—Ç–µ <b>–æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤—Å–µ —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã</b> —Å –ü–û–õ–ù–´–ú –¥–æ—Å—Ç—É–ø–æ–º –∫:\nüîÆ –ú–∞—Ç—Ä–∏—Ü–µ —Å—É–¥—å–±—ã\nüí∏ –ù—É–º–µ—Ä–æ–ª–æ–≥–∏–∏"
#                 " | –õ–∏—á–Ω–æ–º—É —É—Å–ø–µ—Ö—É | –§–∏–Ω–∞–Ω—Å–∞–º\nüíï –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º\n\n–ò–ª–∏ <b>–∑–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å</b> –Ω–∞—à–µ–º—É "
#                 "–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º—É –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É –∏ –ø–æ–ª—É—á–∏—Ç–µ –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: üíï<b>–ö–∞–∫ —É–ª—É—á—à–∏—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º?</b>)",
#                 reply_markup=three_functions,
#                 parse_mode="HTML"
#             )
#             await state.update_data(question_prompt_message_id=question_prompt_message.message_id)


# @router.callback_query(lambda callback: callback.data.startswith("num_"))
# async def handle_section_callback_num(callback_query: CallbackQuery, state: FSMContext):
#     category_mapping = {
#         "num_personality_psychic": "–õ–∏—á–Ω–æ—Å—Ç—å –∏ –ø—Å–∏—Ö–∏–∫–∞",
#         "num_emotions_selfrealization": "–ß—É–≤—Å—Ç–≤–∞ –∏ —Å–∞–º–æ—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è",
#         "num_education_spirituality": "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏ –¥—É—Ö–æ–≤–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ",
#         "num_relationships_responsibility": "–û—Ç–Ω–æ—à–µ–Ω–∏—è –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å",
#         "num_experience_finances": "–û–ø—ã—Ç –∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ñ–µ—Ä–∞",
#         "num_personal_power_transformation": "–õ–∏—á–Ω–∞—è —Å–∏–ª–∞ –∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è",
#         "num_psychology_balance": "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±–∞–ª–∞–Ω—Å",
#         "num_social_family": "–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –∏ —Å–µ–º–µ–π–Ω–∞—è —Å—Ñ–µ—Ä–∞",
#     }

#     category = category_mapping.get(callback_query.data, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è")

#     data = await state.get_data()
#     first_message_id = data.get("first_message_id")
#     question_prompt_message_id = data.get("question_prompt_message_id")
#     previous_warning_message_id = data.get("previous_warning_message_id")

#     if previous_warning_message_id:
#         try:
#             await callback_query.message.bot.delete_message(chat_id=callback_query.message.chat.id, message_id=previous_warning_message_id)
#         except Exception as e:
#             print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

#     user_id = callback_query.from_user.id
#     subscription_details = await get_subscription_details(user_id)
#     subscription_active = subscription_details["subscription_active"]
#     readings_left = subscription_details["readings_left"]
#     questions_left = subscription_details["questions_left"]

#     if readings_left <= 0 and questions_left <= 0:
#         await update_subscription_status(user_id, 0)

#     if not subscription_active and category not in [
#         "–õ–∏—á–Ω–æ—Å—Ç—å –∏ –ø—Å–∏—Ö–∏–∫–∞",
#     ]:
#         warning_message = await callback_query.message.answer(
#             "–≠—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–∫—Ä–æ–π—Ç–µ –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø."
#         )
#         await state.update_data(previous_warning_message_id=warning_message.message_id)
#         return

#     if subscription_active and readings_left <= 0 and category not in [
#         "–õ–∏—á–Ω–æ—Å—Ç—å –∏ –ø—Å–∏—Ö–∏–∫–∞",
#     ]:
#         await notify_subscription_expired(callback_query, state)
#         return

#     if subscription_active and category not in [
#         "–õ–∏—á–Ω–æ—Å—Ç—å –∏ –ø—Å–∏—Ö–∏–∫–∞",
#     ]:
#         new_readings_left = readings_left - 1
#         await update_user_readings_left(user_id, new_readings_left)
    
#     await delete_messages(callback_query.bot, callback_query.message.chat.id, [first_message_id, question_prompt_message_id])
#     await handle_section(callback_query, state, category)

